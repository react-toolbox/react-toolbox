@import '../colors.css';
@import '../media.css';
@import '../variables.css';
@import './config.css';

/**
 * Used to add to a class the open behavior for Drawer.
 * Needs to be extended for different breakpoints so for now we can't
 * avoid using the mixin plugin for now.
 */
@define-mixin open {
  transition-delay: var(--animation-delay);

  & > .scrim {
    & > .drawerContent {
      pointer-events: all;
      transform: translateX(0);
      transition-delay: var(--animation-delay);
    }
  }
}

/**
 * Used to indicate an specific class needs to keep opened the side
 * element. This should be extended with different breakpoints so
 * the mixin plugin cannot be removed for now.
 */
@define-mixin permanent {
  @mixin open;
  max-width: var(--navigation-drawer-desktop-width);
  width: var(--navigation-drawer-desktop-width);

  &.wide {
    max-width: var(--navigation-drawer-max-desktop-width);
    width: var(--navigation-drawer-max-desktop-width);
  }

  &.active {
    & > .scrim {
      background-color: color(var(--drawer-overlay-color) a(0%));
      width: 0;
    }
  }
}

.layout {
  align-items: stretch;
  display: flex;
  flex-direction: row;
  height: 100%;
  justify-content: space-between;
  overflow-y: hidden;
  position: relative;
  width: 100%;
}

.navDrawer {
  height: 100%;
  min-width: 0;
  overflow-x: hidden;
  overflow-y: hidden;
  transition-duration: var(--animation-duration);
  transition-property: width, min-width;
  transition-timing-function: var(--animation-curve-default);
  width: 0;

  & .scrim {
    background-color: color(var(--drawer-overlay-color) a(0%));
    bottom: 0;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    transition:
      background-color var(--animation-duration) var(--animation-curve-default),
      width 10ms linear var(--animation-duration);
    width: 0;
    z-index: var(--z-index-highest);
  }

  & .drawerContent {
    align-items: stretch;
    background-color: var(--drawer-background-color);
    border-right: 1px solid var(--drawer-border-color);
    box-shadow: var(--shadow-2p);
    color: var(--drawer-text-color);
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: space-between;
    overflow-x: hidden;
    overflow-y: hidden;
    pointer-events: none;
    transform: translateX(-100%);
    transition: transform var(--animation-duration) var(--animation-curve-default);
    width: var(--navigation-drawer-mobile-width);

    &.scrollY {
      overflow-y: auto;
    }
  }

  &.pinned {
    @mixin open;
    max-width: var(--navigation-drawer-max-mobile-width);
    width: var(--navigation-drawer-mobile-width);
  }

  &.active {
    &:not(.pinned) {
      @mixin open;
      & .scrim {
        background-color: color(var(--drawer-overlay-color) a(var(--drawer-overlay-opacity)));
        transition: background-color var(--animation-duration) var(--animation-curve-default);
        width: 100%;
      }
    }
  }

  /* Larger than mobile width drawer */
  @media screen and (--larger-than-xs-viewport) {
    &.pinned {
      max-width: var(--navigation-drawer-desktop-width);
      width: var(--navigation-drawer-desktop-width);
    }

    & .drawerContent {
      max-width: var(--navigation-drawer-desktop-width);
      width: var(--navigation-drawer-desktop-width);
    }

    &.wide {
      &.pinned {
        max-width: var(--navigation-drawer-max-desktop-width);
        width: var(--navigation-drawer-max-desktop-width);
      }

      & .drawerContent {
        max-width: var(--navigation-drawer-max-desktop-width);
        width: var(--navigation-drawer-max-desktop-width);
      }
    }
  }

  /* Permanent screen, ignore .active and make part of layout */
  @media screen and (--larger-than-sm-viewport) {
    &.smPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-sm-tablet-viewport) {
    &.smTabletPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-md-viewport) {
    &.mdPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-lg-viewport) {
    &.lgPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-lg-tablet-viewport) {
    &.lgTabletPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-xl-viewport) {
    &.xlPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-xxl-viewport) {
    &.xxlPermanent {
      @mixin permanent;
    }
  }

  @media screen and (--larger-than-xxxl-viewport) {
    &.xxxlPermanent {
      @mixin permanent;
    }
  }
}

.panel {
  align-items: stretch;
  display: flex;
  flex: 1;
  flex-direction: column;
  height: 100%;
  justify-content: space-between;
  overflow-y: hidden;
  position: relative;

  &.scrollY {
    overflow-y: auto;
  }
}

.sidebarContent {
  align-items: stretch;
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: space-between;
  overflow-y: hidden;

  &.scrollY {
    overflow-y: auto;
  }
}

.sidebar {
  background-color: var(--drawer-background-color);
  bottom: 0;
  color: var(--drawer-text-color);
  height: 100%;
  overflow-x: hidden;
  overflow-y: hidden;
  position: absolute;
  right: 0;
  top: 0;
  transition-duration: var(--animation-duration);
  transition-property: width;
  transition-timing-function: var(--animation-curve-default);
  width: 0;
  z-index: calc(var(--z-index-highest - 1));

  @each $increment in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
    &.width-$(increment) {
      & .sidebarContent {
        min-width: 100%;
      }

      &.pinned {
        width: 100%;
      }

      @media screen and (--larger-than-sm-viewport) {
        position: relative;

        & .sidebarContent {
          min-width: calc(var(--standard-increment-desktop) * $(increment));
        }

        &.pinned {
          width: calc(var(--standard-increment-desktop) * $(increment));
        }
      }
    }
  }

  @each $increment in 1, 2, 3, 4, 5, 6, 7, 8, 9 {
    &.width-$(increment) {
      @media screen and (--larger-than-xs-viewport) and (--landscape) {
        position: relative;

        & .sidebarContent {
          min-width: calc(var(--standard-increment-mobile) * $(increment));
        }

        &.pinned {
          width: calc(var(--standard-increment-mobile) * $(increment));
        }
      }

      @media screen and (--larger-than-xs-viewport) and (orientation: portrait) {
        position: relative;

        & .sidebarContent {
          min-width: calc(var(--standard-increment-desktop) * $(increment));
        }

        &.pinned {
          width: calc(var(--standard-increment-desktop) * $(increment));
        }
      }
    }
  }

  @each $increment in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 {
    &.width-$(increment) {
      @media screen and (--larger-than-sm-tablet-viewport) {
        position: relative;

        & .sidebarContent {
          min-width: calc(var(--standard-increment-desktop) * $(increment));
        }

        &.pinned {
          width: calc(var(--standard-increment-desktop) * $(increment));
        }
      }
    }
  }

  &.width-100 {
    position: absolute;

    & .sidebarContent {
      min-width: 100%;
    }

    &.pinned {
      width: 100%;
    }
  }

  @each $pct in 25, 33, 50, 66, 75 {
    &.width-$(pct) {
      position: absolute;

      & .sidebarContent {
        min-width: 100%;
      }

      &.pinned {
        width: 100%;
      }
    }
  }

  @media screen and (--larger-than-sm-tablet-viewport) {
    @each $pct in 25, 33, 50, 66, 75 {
      &.width-$(pct) {
        position: absolute;

        & .sidebarContent {
          min-width: calc($(pct) * 1%);
        }

        &.pinned {
          width: calc($(pct) * 1%);
        }
      }
    }
  }
}
